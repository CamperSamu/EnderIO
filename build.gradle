//buildscript {
//    repositories {
//        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
//        maven {
//            name = 'Fabric'
//            url = 'https://maven.fabricmc.net/'
//        }
//        gradlePluginPortal()
//        mavenCentral()
//    }
//}

plugins {
    id 'com.github.johnrengelman.shadow' version "${shadow_version}"
    id 'fabric-loom' version '0.10-SNAPSHOT' apply false
}

subprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'

    version = getVersionString(project)
    group = 'com.enderio'
    archivesBaseName = getArchiveBaseName(project)
    def modId = getModId(project)

    // Mojang ships Java 16 to end users in 1.17+ instead of Java 8 in 1.16 or lower, so your mod should target Java 16.
    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
//    minecraft {
//        mappings channel: 'official', version: "${minecraft_version}"
//
//        if (project.hasProperty("transformer")) {
//            mappings channel: 'parchment', version: "${mappings_version}-${minecraft_version}"
//            println("Found accessTransformer for ${project.name}: ${project.transformer}")
//            accessTransformer = file(project.transformer)
//        } else {
//            mappings channel: 'parchment', version: "${mappings_version}-${minecraft_version}"
//        }
//
//         //Default run configurations.
//        runs {
//            client {
//                workingDirectory project.file('run')
//
//                property 'forge.logging.markers', 'REGISTRIES'
//                property 'forge.logging.console.level', 'debug'
//
//                // Allow dependent mixins to run
//                property 'mixin.env.remapRefMap', 'true'
//                property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
//
//                mods {
//                    // TODO: Dynamic names??
//                    examplemod {
//                        source sourceSets.main
//                    }
//                }
//            }
//
//            server {
//                workingDirectory project.file('run')
//
//                // Allow dependent mixins to run
//                property 'mixin.env.remapRefMap', 'true'
//                property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
//
//                mods {
//                    // TODO: Dynamic names??
//                    examplemod {
//                        source sourceSets.main
//                    }
//                }
//            }
//
//            data {
//                workingDirectory project.file('run')
//
//                // Allow dependent mixins to run
//                property 'mixin.env.remapRefMap', 'true'
//                property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
//
//                // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
//                args '--mod', modId, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
//
//                mods {
//                    // TODO: Dynamic names??
//                    examplemod {
//                        source sourceSets.main
//                    }
//                }
//            }
//        }
//    }

    configurations {
        shade
    }

    // Include resources generated by data generators.
    sourceSets.main.resources { srcDir 'src/generated/resources' }

    repositories {
        // Registrate
//        maven {
//            url "https://maven.tterrag.com/"
//        }

        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }

        mavenCentral()
        gradlePluginPortal()

        // Rover's temp maven.
        maven {
            url "https://maven.nerdthings.dev/snapshots"
        }

        // Cloth config.
        maven { url "https://maven.shedaniel.me/" }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
//        mappings loom.officialMojangMappings()
        mappings "net.fabricmc:yarn:${project.yarn_mappings}"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    }

    // Example for how to get properties into the manifest for reading at runtime.
    jar {
        destinationDirectory.set(file("$rootDir/build/libs"))
        manifest {
            attributes([
                    "Specification-Title"     : "examplemod",
                    "Specification-Vendor"    : "examplemodsareus",
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : "examplemodsareus",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    // region Tasks

    task cleanJars {
        delete "$rootDir/build/libs"
        delete "$buildDir/libs"
    }

//    shadowJar {
//        configurations = [project.configurations.shade]
//    }

//    reobf {
//        shadowJar {}
//    }

    if (project.hasProperty("releaseBuild") && project.releaseBuild == true) {
//        jar.finalizedBy('reobfJar')
    }
//    publish.dependsOn('reobfJar')

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact jar
                artifactId = getArchiveBaseName(project)
            }
        }
        repositories {
            def pubHypherion = System.getenv('MAVEN_URL') != null
            
            //if (pubHypherion) {
                maven {
                    url System.getenv('MAVEN_URL')
                    credentials {
                        username System.getenv('MAVEN_USER')
                        password System.getenv('MAVEN_PASS_2')
                    }
                }
            //} else {
                maven {
                    url "https://maven.nerdthings.dev/snapshots"
                    credentials {
                        username = System.getenv("MAVEN_USERNAME")
                        password = System.getenv("MAVEN_PASSWORD")
                    }
                }
            //}
        }
    }

    // endregion
}

// region Versioning

// This is the new version/module format:
// module name:
//   enderio-<name>-<mc-version>-<version>
// version:
//   <major>.<minor>.<patch>-<cls>-<hash>
// patch:
//   defaults to 'version_patch'
//   overriten by CI / build server
// cls (classifier):
//   * nightly
//   * dev
//   * ci
//   * snapshot
//   * etc.
// hash:
//   if on a dev machine - the current commit hash

// Examples:
//   * enderio-base-1.12.2-4.0.1.jar            :: release version 4.0.1 for mc 1.12.2
//   * enderio-base-1.12.2-4.2.1-nightly-4      :: nightly build no. 4 for version 4.2.1
//   * enderio-base-1.12.2-4.5.1-dev-c91c8ee6e  :: dev (local) build for commit c91c8ee6e
String getVersionString(Project proj) {
    def build_server = System.getenv('CI') != null || System.getenv('BUILD_NUMBER') != null

    def version_patch_lc = proj.version_patch
    if (System.getenv('BUILD_NUMBER') != null)
        version_patch_lc = System.getenv('BUILD_NUMBER')

    def version_classifier = ''
    if (System.getenv('VERSION_CLS') != null)
        version_classifier = System.getenv('VERSION_CLS')
    else if (System.getenv('NIGHTLY') != null)
        version_classifier = 'nightly'

    def version_hash = ''
    if (!build_server) {
        try {
            version_hash = "git rev-parse --short HEAD".execute().text.trim()
        } catch (all) { }
    }

    def version_base = "${proj.version_major}.${proj.version_minor}.${version_patch_lc}"
    def version_parts = ([ version_base, version_classifier, version_hash ]).findAll { p -> p != '' }

    return String.join('-', version_parts)
}

String getPrettyName(Project proj) {
    if (proj.hasProperty('module_name'))
        return rootProject.name + "-${proj.module_name}"
    return proj.name
}

String getArchiveBaseName(Project proj) {
    return getPrettyName(proj) + "-${rootProject.minecraft_version}"
}

String getModId(Project proj) {
    // Replaces enderiobase with enderio for the purposes of the dummy. TODO: Review the dummy...
    return proj.name.replaceAll('-', '').replaceAll('enderiobase', 'enderio');
}

// endregion
